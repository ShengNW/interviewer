# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from yeying.api.rag import knowledge_pb2 as yeying_dot_api_dot_rag_dot_knowledge__pb2


class KnowledgeStub(object):
    """*
    应用知识库管理模块
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/yeying.api.rag.Knowledge/Create',
                request_serializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.CreateKnowledgeRequest.SerializeToString,
                response_deserializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.CreateKnowledgeResponse.FromString,
                )
        self.Add = channel.unary_unary(
                '/yeying.api.rag.Knowledge/Add',
                request_serializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.AddKnowledgeRequest.SerializeToString,
                response_deserializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.AddKnowledgeResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/yeying.api.rag.Knowledge/Delete',
                request_serializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.DeleteKnowledgeRequest.SerializeToString,
                response_deserializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.DeleteKnowledgeResponse.FromString,
                )


class KnowledgeServicer(object):
    """*
    应用知识库管理模块
    """

    def Create(self, request, context):
        """创建知识库 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Add(self, request, context):
        """添加消息到知识库 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """删除知识库中的URL 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KnowledgeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.CreateKnowledgeRequest.FromString,
                    response_serializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.CreateKnowledgeResponse.SerializeToString,
            ),
            'Add': grpc.unary_unary_rpc_method_handler(
                    servicer.Add,
                    request_deserializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.AddKnowledgeRequest.FromString,
                    response_serializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.AddKnowledgeResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.DeleteKnowledgeRequest.FromString,
                    response_serializer=yeying_dot_api_dot_rag_dot_knowledge__pb2.DeleteKnowledgeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'yeying.api.rag.Knowledge', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Knowledge(object):
    """*
    应用知识库管理模块
    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/yeying.api.rag.Knowledge/Create',
            yeying_dot_api_dot_rag_dot_knowledge__pb2.CreateKnowledgeRequest.SerializeToString,
            yeying_dot_api_dot_rag_dot_knowledge__pb2.CreateKnowledgeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/yeying.api.rag.Knowledge/Add',
            yeying_dot_api_dot_rag_dot_knowledge__pb2.AddKnowledgeRequest.SerializeToString,
            yeying_dot_api_dot_rag_dot_knowledge__pb2.AddKnowledgeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/yeying.api.rag.Knowledge/Delete',
            yeying_dot_api_dot_rag_dot_knowledge__pb2.DeleteKnowledgeRequest.SerializeToString,
            yeying_dot_api_dot_rag_dot_knowledge__pb2.DeleteKnowledgeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
